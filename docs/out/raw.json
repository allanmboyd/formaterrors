{"majorversion": 2, "classmap": {"STYLES": {"name": "STYLES", "namespace": "", "module": "formaterrors", "guessedname": "STYLES", "static": "", "file": "formatErrors.js", "guessedtype": "property", "shortname": "STYLES", "description": "Some provided styles for stackHighlight. These may be overridden or alternatives may be used as required."}, "StackFormat": {"name": "StackFormat", "for": "formaterrors", "innerClasses": ["formaterrors"], "constructors": [{"description": "An object that describes the format of a stack line."}], "namespace": "", "module": "formaterrors", "file": "formatErrors.js", "shortname": "StackFormat", "description": "An object that describes the format of a stack line."}, "formaterrors": {"name": "formaterrors", "namespace": "", "module": "formaterrors", "guessedname": "util", "methods": {"isMessageLine": {"return": {"type": "Boolean", "description": "true is the given line is deemed to be a stack line; false otherwise"}, "params": [{"type": "String", "name": "line", "description": " the line String"}, {"type": "Number", "name": "lineNumber", "description": " the line number of the given line within the stack from which it originated"}], "description": "Determine if a given line is a line from the message part of a stack trace (as opposed to the stack part).", "private": ""}, "getMessages": {"return": {"type": "String[]", "description": "the messages from the given error stack as an array"}, "params": [{"type": "Error", "name": "error", "description": " the error whose stack messages to provide"}], "description": "Get the messages part of an error.stack and return these as an array. (The returned array will only contain\nmultiple items if the message part consists of multiple lines.)", "private": ""}, "stackRange": {"return": {"type": "String", "description": "a new error stack containing the specified range of lines from the provided stack."}, "params": [{"type": "String", "name": "stack", "description": " the Error stack (i.e. error.stack)"}, {"type": "Number", "name": "start", "description": " the first line of the stack to include in the range. Note that the message lines are always included\nas the real first lines regardless of the value of 'start'."}, {"type": "Number", "name": "depthFromStart", "description": " optional number of lines from 'start' to include in the returned stack. If not provided the full\nstack depth starting from 'start' is provided."}], "description": "Given an stack from an Error return a subset of the lines in the stack. The first line (aka the message) is always\nincluded.", "guessedname": "stackRange", "guessedtype": "function"}, "enhanceError": {"return": {"type": "Error", "description": "the given error with an added stackLines property as an array of V8 CallStack objects"}, "params": [{"type": "Error", "name": "error", "description": " an Error"}], "description": "Enhance an Error by adding a stackLines property that contains only the stack lines of the provided error\n(i.e. no message lines). The stackLines property is an array of V8 CallStack objects.\n(Would have preferred to clone the given error but it seems that Object.keys(error) is always empty - so that\ndoes not work.)", "private": ""}, "highlightAssertionError": {"return": {"type": "Error", "description": "the given assertionError with stack hightlighted according to the StackTheme specification"}, "params": [{"type": "AssertionError", "name": "assertionError", "description": " an AssertionError"}, {"type": "StackTheme", "name": "stackTheme", "description": " the theme for the error"}], "guessedname": "highlightAssertionError", "guessedtype": "function"}, "applyStackTheme": {"return": {"type": "String", "description": "a new error stack String transformed according to the specified StackFormat"}, "params": [{"type": "String", "name": "stack", "description": " an error stack (i.e. error.stack)"}, {"type": "StackTheme", "name": "theme", "description": " the theme for the stack"}], "description": "Convenience method to apply multiple transformations to an error stack.", "guessedname": "applyStackTheme", "guessedtype": "function"}, "boldMessageBoldModuleStack": {"return": {"type": "String", "description": "a new error stack with bold message and module entries."}, "params": [{"type": "String", "name": "stack", "description": " an Error stack (i.e. error.stack)"}, {"type": "String", "name": "moduleName", "description": " the name of a module whose stack lines to highlight in bold"}], "description": "Convenience method that highlights the message line and all module related lines in bold.", "guessedname": "boldMessageBoldModuleStack", "guessedtype": "function"}, "highlightStackMessage": {"return": {"type": "String", "description": "a new error stack with the given highlights applied to the message part"}, "params": [{"type": "String", "name": "stack", "description": " an Error stack (i.e. error.stack)"}, {"type": "String[]", "name": "highlights", "description": " an array of prefixes to be applied to each matching line (e.g. [exports.styles.RED,\nexports.styles.BOLD])"}], "description": "Highlight just the first line of an error stack - i.e. the message part", "guessedname": "highlightStackMessage", "guessedtype": "function"}, "isActualExpectedError": {"return": {"type": "Boolean", "description": "true if the given Error contains values for both actual and expected"}, "params": [{"type": "Error", "name": "error", "description": " the Error"}], "description": "Determine if a given Error has actual and expected fields.", "private": ""}, "applyStackHighlights": {"return": {"type": "String", "description": "a new error stack String highlighted as specified by the parameters"}, "params": [{"type": "String", "name": "stack", "description": " an Error stack (i.e. error.stack)"}, {"type": "String[]", "name": "messageLineHighlights", "description": " an array of prefixes to be applied to the first line of the stack\n(e.g. [exports.styles.RED, exports.styles.BOLD])"}, {"type": "String[]", "name": "stackHighlights", "description": " an array of prefixes to be applied to each line (e.g. [exports.styles.RED,\nexports.styles.BOLD]) matching one or more of the provided \"stackPatterns\""}, {"type": "String[]", "name": "stackPatterns", "description": " an array of regular expressions against which to perform match operations on each line of the stack"}, {"type": "Boolean", "name": "inclusive", "description": " use the patterns to include or exclude from the stack. Defaults to true."}], "description": "Convenience method to apply a given set of highlights to a an error stack.", "guessedname": "applyStackHighlights", "guessedtype": "function"}, "isStackLine": {"return": {"type": "Boolean", "description": "true if the given line is deemed to be a stack line; false otherwise"}, "params": [{"type": "String", "name": "line", "description": " the line String"}], "description": "Determine if a given line is a line from the stack part of a stack trace (as opposed to the message part)", "private": ""}, "stackHighlight": {"return": {"type": "String", "description": "a new error stack highlighted with the specified highlights according to the provided patterns"}, "params": [{"type": "String", "name": "stack", "description": " a stack from an Error (i.e. error.stack)"}, {"type": "String[]", "name": "patterns", "description": " an array of regular expressions against which to perform match operations on each line of the stack"}, {"type": "", "name": "highlights", "description": " an array of prefixes to be applied to each matching line (e.g. [exports.styles.RED,\nexports.styles.BOLD])"}, {"type": "Boolean", "name": "inclusive", "description": " use the patterns to include or exclude from the stack. Defaults to true."}], "description": "Apply highlights to an error stack including the message part (line 0 of error.stack) based on matching patterns.", "guessedname": "stackHighlight", "guessedtype": "function"}, "formatStackInternal": {"return": {"type": "Error", "description": "the given error with its stack modified according to the given StackFormat"}, "params": [{"type": "Error", "name": "error", "description": " the error whose stack to format"}, {"type": "String", "name": "message", "description": " the message to include within the formatted stack"}, {"type": "StackFormat", "name": "stackFormat", "description": " the StackFormat specification"}], "description": "Format the stack part (i.e. the stack lines not the message part in the stack) according to a specified StackFormat.\n(See exports.StackFormat for available stack line fields.)", "private": ""}, "formatStack": {"return": {"type": "Error", "description": "the given error with its stack modified according to the given StackFormat"}, "params": [{"type": "Error", "name": "error", "description": " the error whose stack to format"}, {"type": "StackFormat", "name": "stackFormat", "description": " the specification for the required format"}], "description": "Format the stack part (i.e. the stack lines not the message part in the stack) according to a specified StackFormat.\n(See exports.StackFormat for available stack line fields.)", "guessedname": "formatStack", "guessedtype": "function"}, "applyFilters": {"return": {"type": "String", "description": "a new error stack modified according to the results of calls to includedAction and excludedAction based on\nfilters provided and the inclusive parameter."}, "params": [{"type": "Function(stack, stackLine)", "name": "includedAction", "description": " the function to call for stack lines that are included based on filters and inclusive parameters.\nFunction signature is: includedAction(stackUnderConstruction, includedStackLine) returning the updated\nstackUnderConstruction."}, {"type": "Function(stack, stackLine)", "name": "excludedAction", "description": " the function to call for stack lines that are excluded based on filters and inclusive parameters.\nFunction signature is: excludedAction(stackUnderConstruction, excludedStackLine) returning the updated\nstackUnderConstruction."}, {"type": "String", "name": "stack", "description": " a stack from an Error (i.e. error.stack)"}, {"type": "String[]", "name": "filters", "description": " an array of regular expressions against which to perform match operations on each line of the\nstack"}, {"type": "Boolean", "name": "inclusive", "description": " use the filters to include or exclude from the stack. Defaults to true."}, {"type": "Boolean", "name": "includeMessage", "description": " include the message part of the stack in the filtering operation"}], "description": "Apply filters to the lines of an error.stack and call the includedAction or the excludedAction functions based on\nthe result of the match and the value of the 'inclusive' parameter. If based on the filter a stack line is included\nincludedAction is invoked with the current value of the stack under construction and the current stack line. Otherwise\nexcludedAction is called with the same arguments.\nThis function is common to higher level functions that operate based on stack line filtering and should only be\nrequired to meet bespoke behaviour that cannot be achieved through the higher level functions (e.g.\nexports.stackHighlight and exports.stackFilter).\nNormally there should be no need to call this function directly.", "guessedname": "applyFilters", "guessedtype": "function"}, "filterMatch": {"return": {"type": "Boolean", "description": "true if a match is found; false otherwise"}, "params": [{"type": "String", "name": "s", "description": " the String"}, {"type": "String[]", "name": "regExps", "description": " an array of reg. exp. Strings"}], "description": "Determine if a provided array of regular expressions includes a match for a provided String.", "private": ""}, "isError": {"return": {"type": "Boolean", "description": "true is 'error' is an Error; false otherwise"}, "params": [{"type": "Error", "name": "error", "description": " the prospective Error"}], "description": "Determine if a given parameter is an Error.", "private": ""}, "diffToMessage": {"return": {"type": "String", "description": "the message that includes diff details"}, "params": [{"type": "AssertionError", "name": "diffedAssertionError", "description": " an AssertionError that has a diff property containing diffs between the expected and\nactual values"}], "description": "Given an AssertionError that has had diffs applied - and that means it has a diff property - provide the message\nfor the AssertionError including details of the diffs.", "private": ""}, "stackFilter": {"return": {"type": "String", "description": "a new error stack filtered according to the 'filters' and 'inclusive' values"}, "params": [{"type": "String", "name": "stack", "description": " a stack from an Error (i.e. error.stack)"}, {"type": "String[]", "name": "filters", "description": " an array of regular expressions against which to perform match operations on each line of the\nstack"}, {"type": "Boolean", "name": "inclusive", "description": " use the filters to include or exclude from the stack. Defaults to true."}], "description": "Filter lines of a stack in or out of the stack based on an array of regexp values. If a line matches a regexp then\nit is either included or excluded in the returned stack based on the value of 'inclusive'.", "guessedname": "stackFilter", "guessedtype": "function"}}, "file": "formatErrors.js", "guessedtype": "property", "shortname": "formaterrors", "requires": "diffMatchPatch, stack-trace", "description": "An API that provides various options for formatting and highlighting Errors. May be useful for logging and test\nframeworks for example.\nStack lines can be filtered in and out based on patterns and limited by range (e.g. lines 2 through 10). Stack lines\nand error message can have highlights applied based on patterns. Finally stack lines can be formatted to include or\nexclude available fields.\nThe API is quite flexible with a range of methods varying in level with means to specify custom highlights and\nformats."}, "StackTheme": {"name": "StackTheme", "for": "formaterrors", "innerClasses": ["formaterrors"], "constructors": [{"description": "An object that may be used to define a theme for a a set operations (transformations) to apply to an error stack."}], "namespace": "", "module": "formaterrors", "guessedname": "StackTheme", "file": "formatErrors.js", "guessedtype": "function", "shortname": "StackTheme", "description": "An object that may be used to define a theme for a a set operations (transformations) to apply to an error stack."}}, "version": "0.0.3", "modules": {"formaterrors": {"description": "An API that provides various options for formatting and highlighting Errors. May be useful for logging and test\nframeworks for example.\nStack lines can be filtered in and out based on patterns and limited by range (e.g. lines 2 through 10). Stack lines\nand error message can have highlights applied based on patterns. Finally stack lines can be formatted to include or\nexclude available fields.\nThe API is quite flexible with a range of methods varying in level with means to specify custom highlights and\nformats.", "submodules": [], "classlist": ["formaterrors", "StackFormat", "StackTheme", "STYLES"], "filelist": ["formatErrors.js"], "subdata": {}, "name": "formaterrors"}}, "filemap": {"formatErrors.js": {"classlist": ["formaterrors", "StackFormat", "StackTheme", "STYLES"], "name": "formatErrors.js", "module": "formaterrors"}}}